package MST;

import java.util.Arrays;
import java.util.Scanner;

public class Baek_1260 {
	
	static int[][] arr;
	static boolean[] isUse;
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		int N = sc.nextInt();
		int M = sc.nextInt();
		int startNode = sc.nextInt();
		
		arr = new int[N+1][N+1];
		isUse = new boolean[N+1];
		for (int i = 0; i < M; i++) {
			int x = sc.nextInt();
			int y = sc.nextInt();
			arr[x][y]=1;
			arr[y][x]=1;
		}
		dfs(startNode,N);
		System.out.println();
		for (int i = 0; i < N+1; i++) {
			Arrays.fill(arr[i], 0);
			System.out.println(Arrays.toString(arr[i]));
		}
		
		Arrays.fill(isUse, false);
		System.out.println(Arrays.toString(isUse));
		
	}

	private static void dfs(int startNode, int N) {
		// TODO Auto-generated method stub
		System.out.println(startNode);
		isUse[startNode] = true;
		for (int i = 1; i <= N; i++) {
			if(isUse[i]==true || arr[startNode][i]==0) {
				continue;
			}
			dfs(i,N);
		}
		
	}
}