package 금요일;

import java.awt.Point;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class 화염에서탈출 {

	static int R;
	static int C;

	static boolean inMap(int x, int y) {
		return (x >= 0 && x < R && y >= 0 && y < C);
	}

	static int[] dx = { -1, 1, 0, 0 };
	static int[] dy = { 0, 0, -1, 1 };
	static int[][] map;
	static Queue<Point> q = new LinkedList<Point>();// 불 퍼트리기
	static Queue<posi> q2 = new LinkedList<posi>();
	static int hx, hy; // 집 위치
	static int sx = 0, sy = 0; // 시작위치
	static int result = -1; // 0이상이면 집 도착 가능한 것

//이동 가능은 0 바위 -1 집 -2
	// 불은 바위와 집만 이동 불가능
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc = new Scanner(System.in);
		R = sc.nextInt();
		C = sc.nextInt();
		map = new int[R][C];

		for (int i = 0; i < R; i++) {
			String str = sc.next();
			for (int j = 0; j < C; j++) {
				char c = str.charAt(j);
				if (c == 'S') {// 시작 위치
					sx = i;
					sy = j;
					map[i][j] = 0;
				} else if (c == '*') { // 불을 큐에 저장
					q.add(new Point(i, j));
					map[i][j] = 0;
				} else if (c == 'D') {// 집 위치
					hx = i;
					hy = j;
					map[i][j] = -2;
				} else if (c == 'X') {// 바위, 이동 불가능
					map[i][j] = -1;
				}
			}
		} // 입력 끝
		bfs();
		if (result > 0)
			System.out.println(result);
		else
			System.out.println("impossible");
	}

	private static void bfs() {
		// TODO Auto-generated method stub
		int time = 1;
		while (!q.isEmpty()) {
			int qSize = q.size();
			for (int i = 0; i < qSize; i++) {
				Point p = q.poll();
				for (int j = 0; j < 4; j++) {
					int nx = p.x + dx[j];
					int ny = p.y + dy[j];

					// 빈칸인 경우 불 퍼트리기
					if (inMap(nx, ny) && map[nx][ny] == 0) {
						map[nx][ny] = time;
						q.add(new Point(nx, ny));
					}
				}
			}
			time++;
			
			for (int i = 0; i < R; i++) {
				for (int j = 0; j < C; j++) {
					System.out.print(map[i][j]);
				}
				System.out.println();
			}
			System.out.println("===time은 =====" + time);
			
		}//불 다 퍼트림
		q2.add(new posi(sx,sy,0));
		move();
	}

	static class posi{
		int x;
		int y;
		int time;
		public posi(int x, int y,int time) {
			// TODO Auto-generated constructor stub
			this.x=x;
			this.y=y;
			this.time=time;
		}
	}

	static void move() {
		loop:while(!q2.isEmpty()) {
			posi tmp=q2.poll();
			for (int i = 0; i <4; i++) {
				int nx=tmp.x+dx[i];
				int ny=tmp.y+dy[i];
				int nt=tmp.time;
				if(nx==hx&&ny==hy) {
					result=nt;
					break loop;
				}
				if(inMap(nx, ny)&&map[nx][ny]>nt) {
					q2.add(new posi(nx,ny,nt+1));
				}
			}
		}
	}

}
